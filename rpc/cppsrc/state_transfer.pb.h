// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_transfer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_5ftransfer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_5ftransfer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_5ftransfer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_5ftransfer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_5ftransfer_2eproto;
namespace state_transfer {
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderReq;
class OrderReqDefaultTypeInternal;
extern OrderReqDefaultTypeInternal _OrderReq_default_instance_;
class OrderResp;
class OrderRespDefaultTypeInternal;
extern OrderRespDefaultTypeInternal _OrderResp_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class QueryResp;
class QueryRespDefaultTypeInternal;
extern QueryRespDefaultTypeInternal _QueryResp_default_instance_;
class TxnInfo;
class TxnInfoDefaultTypeInternal;
extern TxnInfoDefaultTypeInternal _TxnInfo_default_instance_;
class Update;
class UpdateDefaultTypeInternal;
extern UpdateDefaultTypeInternal _Update_default_instance_;
class UpdateReq;
class UpdateReqDefaultTypeInternal;
extern UpdateReqDefaultTypeInternal _UpdateReq_default_instance_;
class UpdateResp;
class UpdateRespDefaultTypeInternal;
extern UpdateRespDefaultTypeInternal _UpdateResp_default_instance_;
}  // namespace state_transfer
PROTOBUF_NAMESPACE_OPEN
template<> ::state_transfer::Order* Arena::CreateMaybeMessage<::state_transfer::Order>(Arena*);
template<> ::state_transfer::OrderReq* Arena::CreateMaybeMessage<::state_transfer::OrderReq>(Arena*);
template<> ::state_transfer::OrderResp* Arena::CreateMaybeMessage<::state_transfer::OrderResp>(Arena*);
template<> ::state_transfer::Query* Arena::CreateMaybeMessage<::state_transfer::Query>(Arena*);
template<> ::state_transfer::QueryResp* Arena::CreateMaybeMessage<::state_transfer::QueryResp>(Arena*);
template<> ::state_transfer::TxnInfo* Arena::CreateMaybeMessage<::state_transfer::TxnInfo>(Arena*);
template<> ::state_transfer::Update* Arena::CreateMaybeMessage<::state_transfer::Update>(Arena*);
template<> ::state_transfer::UpdateReq* Arena::CreateMaybeMessage<::state_transfer::UpdateReq>(Arena*);
template<> ::state_transfer::UpdateResp* Arena::CreateMaybeMessage<::state_transfer::UpdateResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace state_transfer {

enum Update_OpType : int {
  Update_OpType_UPDATE = 0,
  Update_OpType_INSERT = 1,
  Update_OpType_REMOVE = 2,
  Update_OpType_Update_OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Update_OpType_Update_OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Update_OpType_IsValid(int value);
constexpr Update_OpType Update_OpType_OpType_MIN = Update_OpType_UPDATE;
constexpr Update_OpType Update_OpType_OpType_MAX = Update_OpType_REMOVE;
constexpr int Update_OpType_OpType_ARRAYSIZE = Update_OpType_OpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Update_OpType_descriptor();
template<typename T>
inline const std::string& Update_OpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Update_OpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Update_OpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Update_OpType_descriptor(), enum_t_value);
}
inline bool Update_OpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Update_OpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Update_OpType>(
    Update_OpType_descriptor(), name, value);
}
// ===================================================================

class Update PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_transfer.Update) */ {
 public:
  inline Update() : Update(nullptr) {}
  virtual ~Update();

  Update(const Update& from);
  Update(Update&& from) noexcept
    : Update() {
    *this = ::std::move(from);
  }

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }
  inline Update& operator=(Update&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Update& default_instance();

  static inline const Update* internal_default_instance() {
    return reinterpret_cast<const Update*>(
               &_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Update& a, Update& b) {
    a.Swap(&b);
  }
  inline void Swap(Update* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Update* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Update* New() const final {
    return CreateMaybeMessage<Update>(nullptr);
  }

  Update* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Update>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Update& from);
  void MergeFrom(const Update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Update* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_transfer.Update";
  }
  protected:
  explicit Update(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5ftransfer_2eproto);
    return ::descriptor_table_state_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Update_OpType OpType;
  static constexpr OpType UPDATE =
    Update_OpType_UPDATE;
  static constexpr OpType INSERT =
    Update_OpType_INSERT;
  static constexpr OpType REMOVE =
    Update_OpType_REMOVE;
  static inline bool OpType_IsValid(int value) {
    return Update_OpType_IsValid(value);
  }
  static constexpr OpType OpType_MIN =
    Update_OpType_OpType_MIN;
  static constexpr OpType OpType_MAX =
    Update_OpType_OpType_MAX;
  static constexpr int OpType_ARRAYSIZE =
    Update_OpType_OpType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OpType_descriptor() {
    return Update_OpType_descriptor();
  }
  template<typename T>
  static inline const std::string& OpType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OpType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OpType_Name.");
    return Update_OpType_Name(enum_t_value);
  }
  static inline bool OpType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OpType* value) {
    return Update_OpType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPkeyColNameFieldNumber = 2,
    kPkeyValFieldNumber = 3,
    kValueFieldNumber = 4,
    kRowIndexFieldNumber = 1,
    kTxnIdFieldNumber = 6,
    kOpTypeFieldNumber = 5,
  };
  // string pkey_col_name = 2;
  void clear_pkey_col_name();
  const std::string& pkey_col_name() const;
  void set_pkey_col_name(const std::string& value);
  void set_pkey_col_name(std::string&& value);
  void set_pkey_col_name(const char* value);
  void set_pkey_col_name(const char* value, size_t size);
  std::string* mutable_pkey_col_name();
  std::string* release_pkey_col_name();
  void set_allocated_pkey_col_name(std::string* pkey_col_name);
  private:
  const std::string& _internal_pkey_col_name() const;
  void _internal_set_pkey_col_name(const std::string& value);
  std::string* _internal_mutable_pkey_col_name();
  public:

  // string pkey_val = 3;
  void clear_pkey_val();
  const std::string& pkey_val() const;
  void set_pkey_val(const std::string& value);
  void set_pkey_val(std::string&& value);
  void set_pkey_val(const char* value);
  void set_pkey_val(const char* value, size_t size);
  std::string* mutable_pkey_val();
  std::string* release_pkey_val();
  void set_allocated_pkey_val(std::string* pkey_val);
  private:
  const std::string& _internal_pkey_val() const;
  void _internal_set_pkey_val(const std::string& value);
  std::string* _internal_mutable_pkey_val();
  public:

  // string value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 row_index = 1;
  void clear_row_index();
  ::PROTOBUF_NAMESPACE_ID::int64 row_index() const;
  void set_row_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_row_index() const;
  void _internal_set_row_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 txnId = 6;
  void clear_txnid();
  ::PROTOBUF_NAMESPACE_ID::int64 txnid() const;
  void set_txnid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_txnid() const;
  void _internal_set_txnid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .state_transfer.Update.OpType op_type = 5;
  void clear_op_type();
  ::state_transfer::Update_OpType op_type() const;
  void set_op_type(::state_transfer::Update_OpType value);
  private:
  ::state_transfer::Update_OpType _internal_op_type() const;
  void _internal_set_op_type(::state_transfer::Update_OpType value);
  public:

  // @@protoc_insertion_point(class_scope:state_transfer.Update)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pkey_col_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pkey_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 row_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 txnid_;
  int op_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class UpdateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_transfer.UpdateReq) */ {
 public:
  inline UpdateReq() : UpdateReq(nullptr) {}
  virtual ~UpdateReq();

  UpdateReq(const UpdateReq& from);
  UpdateReq(UpdateReq&& from) noexcept
    : UpdateReq() {
    *this = ::std::move(from);
  }

  inline UpdateReq& operator=(const UpdateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReq& operator=(UpdateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReq& default_instance();

  static inline const UpdateReq* internal_default_instance() {
    return reinterpret_cast<const UpdateReq*>(
               &_UpdateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateReq& a, UpdateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReq* New() const final {
    return CreateMaybeMessage<UpdateReq>(nullptr);
  }

  UpdateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReq& from);
  void MergeFrom(const UpdateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_transfer.UpdateReq";
  }
  protected:
  explicit UpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5ftransfer_2eproto);
    return ::descriptor_table_state_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 3,
    kColIdFieldNumber = 2,
    kShardIdFieldNumber = 1,
  };
  // repeated .state_transfer.Update updates = 3;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::state_transfer::Update* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::state_transfer::Update >*
      mutable_updates();
  private:
  const ::state_transfer::Update& _internal_updates(int index) const;
  ::state_transfer::Update* _internal_add_updates();
  public:
  const ::state_transfer::Update& updates(int index) const;
  ::state_transfer::Update* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::state_transfer::Update >&
      updates() const;

  // string col_id = 2;
  void clear_col_id();
  const std::string& col_id() const;
  void set_col_id(const std::string& value);
  void set_col_id(std::string&& value);
  void set_col_id(const char* value);
  void set_col_id(const char* value, size_t size);
  std::string* mutable_col_id();
  std::string* release_col_id();
  void set_allocated_col_id(std::string* col_id);
  private:
  const std::string& _internal_col_id() const;
  void _internal_set_col_id(const std::string& value);
  std::string* _internal_mutable_col_id();
  public:

  // int32 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::int32 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:state_transfer.UpdateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::state_transfer::Update > updates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class UpdateResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_transfer.UpdateResp) */ {
 public:
  inline UpdateResp() : UpdateResp(nullptr) {}
  virtual ~UpdateResp();

  UpdateResp(const UpdateResp& from);
  UpdateResp(UpdateResp&& from) noexcept
    : UpdateResp() {
    *this = ::std::move(from);
  }

  inline UpdateResp& operator=(const UpdateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResp& operator=(UpdateResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateResp& default_instance();

  static inline const UpdateResp* internal_default_instance() {
    return reinterpret_cast<const UpdateResp*>(
               &_UpdateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateResp& a, UpdateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateResp* New() const final {
    return CreateMaybeMessage<UpdateResp>(nullptr);
  }

  UpdateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateResp& from);
  void MergeFrom(const UpdateResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_transfer.UpdateResp";
  }
  protected:
  explicit UpdateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5ftransfer_2eproto);
    return ::descriptor_table_state_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:state_transfer.UpdateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class TxnInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_transfer.TxnInfo) */ {
 public:
  inline TxnInfo() : TxnInfo(nullptr) {}
  virtual ~TxnInfo();

  TxnInfo(const TxnInfo& from);
  TxnInfo(TxnInfo&& from) noexcept
    : TxnInfo() {
    *this = ::std::move(from);
  }

  inline TxnInfo& operator=(const TxnInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxnInfo& operator=(TxnInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxnInfo& default_instance();

  static inline const TxnInfo* internal_default_instance() {
    return reinterpret_cast<const TxnInfo*>(
               &_TxnInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TxnInfo& a, TxnInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TxnInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxnInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxnInfo* New() const final {
    return CreateMaybeMessage<TxnInfo>(nullptr);
  }

  TxnInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxnInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxnInfo& from);
  void MergeFrom(const TxnInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxnInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_transfer.TxnInfo";
  }
  protected:
  explicit TxnInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5ftransfer_2eproto);
    return ::descriptor_table_state_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxnIdFieldNumber = 1,
    kTxnTypeFieldNumber = 2,
    kIsQueryFieldNumber = 3,
  };
  // int64 txnId = 1;
  void clear_txnid();
  ::PROTOBUF_NAMESPACE_ID::int64 txnid() const;
  void set_txnid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_txnid() const;
  void _internal_set_txnid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 TxnType = 2;
  void clear_txntype();
  ::PROTOBUF_NAMESPACE_ID::int32 txntype() const;
  void set_txntype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_txntype() const;
  void _internal_set_txntype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isQuery = 3;
  void clear_isquery();
  bool isquery() const;
  void set_isquery(bool value);
  private:
  bool _internal_isquery() const;
  void _internal_set_isquery(bool value);
  public:

  // @@protoc_insertion_point(class_scope:state_transfer.TxnInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 txnid_;
  ::PROTOBUF_NAMESPACE_ID::int32 txntype_;
  bool isquery_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_transfer.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  virtual ~Order();

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Order& default_instance();

  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_transfer.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5ftransfer_2eproto);
    return ::descriptor_table_state_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTouchedColsFieldNumber = 3,
    kTouchedShardFieldNumber = 4,
    kTxnIdFieldNumber = 1,
    kTxnTypeFieldNumber = 2,
  };
  // repeated string touched_cols = 3;
  int touched_cols_size() const;
  private:
  int _internal_touched_cols_size() const;
  public:
  void clear_touched_cols();
  const std::string& touched_cols(int index) const;
  std::string* mutable_touched_cols(int index);
  void set_touched_cols(int index, const std::string& value);
  void set_touched_cols(int index, std::string&& value);
  void set_touched_cols(int index, const char* value);
  void set_touched_cols(int index, const char* value, size_t size);
  std::string* add_touched_cols();
  void add_touched_cols(const std::string& value);
  void add_touched_cols(std::string&& value);
  void add_touched_cols(const char* value);
  void add_touched_cols(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& touched_cols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_touched_cols();
  private:
  const std::string& _internal_touched_cols(int index) const;
  std::string* _internal_add_touched_cols();
  public:

  // repeated int32 touched_shard = 4;
  int touched_shard_size() const;
  private:
  int _internal_touched_shard_size() const;
  public:
  void clear_touched_shard();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touched_shard(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_touched_shard() const;
  void _internal_add_touched_shard(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_touched_shard();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 touched_shard(int index) const;
  void set_touched_shard(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_touched_shard(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      touched_shard() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_touched_shard();

  // int64 txn_id = 1;
  void clear_txn_id();
  ::PROTOBUF_NAMESPACE_ID::int64 txn_id() const;
  void set_txn_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_txn_id() const;
  void _internal_set_txn_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 txn_type = 2;
  void clear_txn_type();
  ::PROTOBUF_NAMESPACE_ID::int64 txn_type() const;
  void set_txn_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_txn_type() const;
  void _internal_set_txn_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:state_transfer.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> touched_cols_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > touched_shard_;
  mutable std::atomic<int> _touched_shard_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 txn_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 txn_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class OrderReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_transfer.OrderReq) */ {
 public:
  inline OrderReq() : OrderReq(nullptr) {}
  virtual ~OrderReq();

  OrderReq(const OrderReq& from);
  OrderReq(OrderReq&& from) noexcept
    : OrderReq() {
    *this = ::std::move(from);
  }

  inline OrderReq& operator=(const OrderReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderReq& operator=(OrderReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderReq& default_instance();

  static inline const OrderReq* internal_default_instance() {
    return reinterpret_cast<const OrderReq*>(
               &_OrderReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OrderReq& a, OrderReq& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderReq* New() const final {
    return CreateMaybeMessage<OrderReq>(nullptr);
  }

  OrderReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderReq& from);
  void MergeFrom(const OrderReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_transfer.OrderReq";
  }
  protected:
  explicit OrderReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5ftransfer_2eproto);
    return ::descriptor_table_state_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 2,
    kShardIdFieldNumber = 1,
  };
  // repeated .state_transfer.Order orders = 2;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::state_transfer::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::state_transfer::Order >*
      mutable_orders();
  private:
  const ::state_transfer::Order& _internal_orders(int index) const;
  ::state_transfer::Order* _internal_add_orders();
  public:
  const ::state_transfer::Order& orders(int index) const;
  ::state_transfer::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::state_transfer::Order >&
      orders() const;

  // int32 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::int32 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:state_transfer.OrderReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::state_transfer::Order > orders_;
  ::PROTOBUF_NAMESPACE_ID::int32 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class OrderResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_transfer.OrderResp) */ {
 public:
  inline OrderResp() : OrderResp(nullptr) {}
  virtual ~OrderResp();

  OrderResp(const OrderResp& from);
  OrderResp(OrderResp&& from) noexcept
    : OrderResp() {
    *this = ::std::move(from);
  }

  inline OrderResp& operator=(const OrderResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderResp& operator=(OrderResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderResp& default_instance();

  static inline const OrderResp* internal_default_instance() {
    return reinterpret_cast<const OrderResp*>(
               &_OrderResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OrderResp& a, OrderResp& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderResp* New() const final {
    return CreateMaybeMessage<OrderResp>(nullptr);
  }

  OrderResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderResp& from);
  void MergeFrom(const OrderResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_transfer.OrderResp";
  }
  protected:
  explicit OrderResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5ftransfer_2eproto);
    return ::descriptor_table_state_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:state_transfer.OrderResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class Query PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_transfer.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  virtual ~Query();

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Query& default_instance();

  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(nullptr);
  }

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_transfer.Query";
  }
  protected:
  explicit Query(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5ftransfer_2eproto);
    return ::descriptor_table_state_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTouchedColsFieldNumber = 3,
    kTouchedShardFieldNumber = 4,
    kContentFieldNumber = 5,
    kTxnIdFieldNumber = 1,
    kTxnTypeFieldNumber = 2,
  };
  // repeated string touched_cols = 3;
  int touched_cols_size() const;
  private:
  int _internal_touched_cols_size() const;
  public:
  void clear_touched_cols();
  const std::string& touched_cols(int index) const;
  std::string* mutable_touched_cols(int index);
  void set_touched_cols(int index, const std::string& value);
  void set_touched_cols(int index, std::string&& value);
  void set_touched_cols(int index, const char* value);
  void set_touched_cols(int index, const char* value, size_t size);
  std::string* add_touched_cols();
  void add_touched_cols(const std::string& value);
  void add_touched_cols(std::string&& value);
  void add_touched_cols(const char* value);
  void add_touched_cols(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& touched_cols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_touched_cols();
  private:
  const std::string& _internal_touched_cols(int index) const;
  std::string* _internal_add_touched_cols();
  public:

  // repeated int32 touched_shard = 4;
  int touched_shard_size() const;
  private:
  int _internal_touched_shard_size() const;
  public:
  void clear_touched_shard();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touched_shard(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_touched_shard() const;
  void _internal_add_touched_shard(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_touched_shard();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 touched_shard(int index) const;
  void set_touched_shard(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_touched_shard(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      touched_shard() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_touched_shard();

  // string content = 5;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int64 txn_id = 1;
  void clear_txn_id();
  ::PROTOBUF_NAMESPACE_ID::int64 txn_id() const;
  void set_txn_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_txn_id() const;
  void _internal_set_txn_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 txn_type = 2;
  void clear_txn_type();
  ::PROTOBUF_NAMESPACE_ID::int64 txn_type() const;
  void set_txn_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_txn_type() const;
  void _internal_set_txn_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:state_transfer.Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> touched_cols_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > touched_shard_;
  mutable std::atomic<int> _touched_shard_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int64 txn_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 txn_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5ftransfer_2eproto;
};
// -------------------------------------------------------------------

class QueryResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_transfer.QueryResp) */ {
 public:
  inline QueryResp() : QueryResp(nullptr) {}
  virtual ~QueryResp();

  QueryResp(const QueryResp& from);
  QueryResp(QueryResp&& from) noexcept
    : QueryResp() {
    *this = ::std::move(from);
  }

  inline QueryResp& operator=(const QueryResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResp& operator=(QueryResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResp& default_instance();

  static inline const QueryResp* internal_default_instance() {
    return reinterpret_cast<const QueryResp*>(
               &_QueryResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryResp& a, QueryResp& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResp* New() const final {
    return CreateMaybeMessage<QueryResp>(nullptr);
  }

  QueryResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResp& from);
  void MergeFrom(const QueryResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_transfer.QueryResp";
  }
  protected:
  explicit QueryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5ftransfer_2eproto);
    return ::descriptor_table_state_5ftransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res() const;
  void _internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:state_transfer.QueryResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5ftransfer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Update

// int64 row_index = 1;
inline void Update::clear_row_index() {
  row_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Update::_internal_row_index() const {
  return row_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Update::row_index() const {
  // @@protoc_insertion_point(field_get:state_transfer.Update.row_index)
  return _internal_row_index();
}
inline void Update::_internal_set_row_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  row_index_ = value;
}
inline void Update::set_row_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_row_index(value);
  // @@protoc_insertion_point(field_set:state_transfer.Update.row_index)
}

// string pkey_col_name = 2;
inline void Update::clear_pkey_col_name() {
  pkey_col_name_.ClearToEmpty();
}
inline const std::string& Update::pkey_col_name() const {
  // @@protoc_insertion_point(field_get:state_transfer.Update.pkey_col_name)
  return _internal_pkey_col_name();
}
inline void Update::set_pkey_col_name(const std::string& value) {
  _internal_set_pkey_col_name(value);
  // @@protoc_insertion_point(field_set:state_transfer.Update.pkey_col_name)
}
inline std::string* Update::mutable_pkey_col_name() {
  // @@protoc_insertion_point(field_mutable:state_transfer.Update.pkey_col_name)
  return _internal_mutable_pkey_col_name();
}
inline const std::string& Update::_internal_pkey_col_name() const {
  return pkey_col_name_.Get();
}
inline void Update::_internal_set_pkey_col_name(const std::string& value) {
  
  pkey_col_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Update::set_pkey_col_name(std::string&& value) {
  
  pkey_col_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:state_transfer.Update.pkey_col_name)
}
inline void Update::set_pkey_col_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pkey_col_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:state_transfer.Update.pkey_col_name)
}
inline void Update::set_pkey_col_name(const char* value,
    size_t size) {
  
  pkey_col_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:state_transfer.Update.pkey_col_name)
}
inline std::string* Update::_internal_mutable_pkey_col_name() {
  
  return pkey_col_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Update::release_pkey_col_name() {
  // @@protoc_insertion_point(field_release:state_transfer.Update.pkey_col_name)
  return pkey_col_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Update::set_allocated_pkey_col_name(std::string* pkey_col_name) {
  if (pkey_col_name != nullptr) {
    
  } else {
    
  }
  pkey_col_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pkey_col_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:state_transfer.Update.pkey_col_name)
}

// string pkey_val = 3;
inline void Update::clear_pkey_val() {
  pkey_val_.ClearToEmpty();
}
inline const std::string& Update::pkey_val() const {
  // @@protoc_insertion_point(field_get:state_transfer.Update.pkey_val)
  return _internal_pkey_val();
}
inline void Update::set_pkey_val(const std::string& value) {
  _internal_set_pkey_val(value);
  // @@protoc_insertion_point(field_set:state_transfer.Update.pkey_val)
}
inline std::string* Update::mutable_pkey_val() {
  // @@protoc_insertion_point(field_mutable:state_transfer.Update.pkey_val)
  return _internal_mutable_pkey_val();
}
inline const std::string& Update::_internal_pkey_val() const {
  return pkey_val_.Get();
}
inline void Update::_internal_set_pkey_val(const std::string& value) {
  
  pkey_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Update::set_pkey_val(std::string&& value) {
  
  pkey_val_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:state_transfer.Update.pkey_val)
}
inline void Update::set_pkey_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pkey_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:state_transfer.Update.pkey_val)
}
inline void Update::set_pkey_val(const char* value,
    size_t size) {
  
  pkey_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:state_transfer.Update.pkey_val)
}
inline std::string* Update::_internal_mutable_pkey_val() {
  
  return pkey_val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Update::release_pkey_val() {
  // @@protoc_insertion_point(field_release:state_transfer.Update.pkey_val)
  return pkey_val_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Update::set_allocated_pkey_val(std::string* pkey_val) {
  if (pkey_val != nullptr) {
    
  } else {
    
  }
  pkey_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pkey_val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:state_transfer.Update.pkey_val)
}

// string value = 4;
inline void Update::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Update::value() const {
  // @@protoc_insertion_point(field_get:state_transfer.Update.value)
  return _internal_value();
}
inline void Update::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:state_transfer.Update.value)
}
inline std::string* Update::mutable_value() {
  // @@protoc_insertion_point(field_mutable:state_transfer.Update.value)
  return _internal_mutable_value();
}
inline const std::string& Update::_internal_value() const {
  return value_.Get();
}
inline void Update::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Update::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:state_transfer.Update.value)
}
inline void Update::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:state_transfer.Update.value)
}
inline void Update::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:state_transfer.Update.value)
}
inline std::string* Update::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Update::release_value() {
  // @@protoc_insertion_point(field_release:state_transfer.Update.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Update::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:state_transfer.Update.value)
}

// .state_transfer.Update.OpType op_type = 5;
inline void Update::clear_op_type() {
  op_type_ = 0;
}
inline ::state_transfer::Update_OpType Update::_internal_op_type() const {
  return static_cast< ::state_transfer::Update_OpType >(op_type_);
}
inline ::state_transfer::Update_OpType Update::op_type() const {
  // @@protoc_insertion_point(field_get:state_transfer.Update.op_type)
  return _internal_op_type();
}
inline void Update::_internal_set_op_type(::state_transfer::Update_OpType value) {
  
  op_type_ = value;
}
inline void Update::set_op_type(::state_transfer::Update_OpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:state_transfer.Update.op_type)
}

// int64 txnId = 6;
inline void Update::clear_txnid() {
  txnid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Update::_internal_txnid() const {
  return txnid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Update::txnid() const {
  // @@protoc_insertion_point(field_get:state_transfer.Update.txnId)
  return _internal_txnid();
}
inline void Update::_internal_set_txnid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  txnid_ = value;
}
inline void Update::set_txnid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_txnid(value);
  // @@protoc_insertion_point(field_set:state_transfer.Update.txnId)
}

// -------------------------------------------------------------------

// UpdateReq

// int32 shard_id = 1;
inline void UpdateReq::clear_shard_id() {
  shard_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq::shard_id() const {
  // @@protoc_insertion_point(field_get:state_transfer.UpdateReq.shard_id)
  return _internal_shard_id();
}
inline void UpdateReq::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shard_id_ = value;
}
inline void UpdateReq::set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:state_transfer.UpdateReq.shard_id)
}

// string col_id = 2;
inline void UpdateReq::clear_col_id() {
  col_id_.ClearToEmpty();
}
inline const std::string& UpdateReq::col_id() const {
  // @@protoc_insertion_point(field_get:state_transfer.UpdateReq.col_id)
  return _internal_col_id();
}
inline void UpdateReq::set_col_id(const std::string& value) {
  _internal_set_col_id(value);
  // @@protoc_insertion_point(field_set:state_transfer.UpdateReq.col_id)
}
inline std::string* UpdateReq::mutable_col_id() {
  // @@protoc_insertion_point(field_mutable:state_transfer.UpdateReq.col_id)
  return _internal_mutable_col_id();
}
inline const std::string& UpdateReq::_internal_col_id() const {
  return col_id_.Get();
}
inline void UpdateReq::_internal_set_col_id(const std::string& value) {
  
  col_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateReq::set_col_id(std::string&& value) {
  
  col_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:state_transfer.UpdateReq.col_id)
}
inline void UpdateReq::set_col_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  col_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:state_transfer.UpdateReq.col_id)
}
inline void UpdateReq::set_col_id(const char* value,
    size_t size) {
  
  col_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:state_transfer.UpdateReq.col_id)
}
inline std::string* UpdateReq::_internal_mutable_col_id() {
  
  return col_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateReq::release_col_id() {
  // @@protoc_insertion_point(field_release:state_transfer.UpdateReq.col_id)
  return col_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateReq::set_allocated_col_id(std::string* col_id) {
  if (col_id != nullptr) {
    
  } else {
    
  }
  col_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), col_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:state_transfer.UpdateReq.col_id)
}

// repeated .state_transfer.Update updates = 3;
inline int UpdateReq::_internal_updates_size() const {
  return updates_.size();
}
inline int UpdateReq::updates_size() const {
  return _internal_updates_size();
}
inline void UpdateReq::clear_updates() {
  updates_.Clear();
}
inline ::state_transfer::Update* UpdateReq::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:state_transfer.UpdateReq.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::state_transfer::Update >*
UpdateReq::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:state_transfer.UpdateReq.updates)
  return &updates_;
}
inline const ::state_transfer::Update& UpdateReq::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::state_transfer::Update& UpdateReq::updates(int index) const {
  // @@protoc_insertion_point(field_get:state_transfer.UpdateReq.updates)
  return _internal_updates(index);
}
inline ::state_transfer::Update* UpdateReq::_internal_add_updates() {
  return updates_.Add();
}
inline ::state_transfer::Update* UpdateReq::add_updates() {
  // @@protoc_insertion_point(field_add:state_transfer.UpdateReq.updates)
  return _internal_add_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::state_transfer::Update >&
UpdateReq::updates() const {
  // @@protoc_insertion_point(field_list:state_transfer.UpdateReq.updates)
  return updates_;
}

// -------------------------------------------------------------------

// UpdateResp

// int32 res = 1;
inline void UpdateResp::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateResp::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateResp::res() const {
  // @@protoc_insertion_point(field_get:state_transfer.UpdateResp.res)
  return _internal_res();
}
inline void UpdateResp::_internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
}
inline void UpdateResp::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:state_transfer.UpdateResp.res)
}

// -------------------------------------------------------------------

// TxnInfo

// int64 txnId = 1;
inline void TxnInfo::clear_txnid() {
  txnid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TxnInfo::_internal_txnid() const {
  return txnid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TxnInfo::txnid() const {
  // @@protoc_insertion_point(field_get:state_transfer.TxnInfo.txnId)
  return _internal_txnid();
}
inline void TxnInfo::_internal_set_txnid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  txnid_ = value;
}
inline void TxnInfo::set_txnid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_txnid(value);
  // @@protoc_insertion_point(field_set:state_transfer.TxnInfo.txnId)
}

// int32 TxnType = 2;
inline void TxnInfo::clear_txntype() {
  txntype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TxnInfo::_internal_txntype() const {
  return txntype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TxnInfo::txntype() const {
  // @@protoc_insertion_point(field_get:state_transfer.TxnInfo.TxnType)
  return _internal_txntype();
}
inline void TxnInfo::_internal_set_txntype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  txntype_ = value;
}
inline void TxnInfo::set_txntype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_txntype(value);
  // @@protoc_insertion_point(field_set:state_transfer.TxnInfo.TxnType)
}

// bool isQuery = 3;
inline void TxnInfo::clear_isquery() {
  isquery_ = false;
}
inline bool TxnInfo::_internal_isquery() const {
  return isquery_;
}
inline bool TxnInfo::isquery() const {
  // @@protoc_insertion_point(field_get:state_transfer.TxnInfo.isQuery)
  return _internal_isquery();
}
inline void TxnInfo::_internal_set_isquery(bool value) {
  
  isquery_ = value;
}
inline void TxnInfo::set_isquery(bool value) {
  _internal_set_isquery(value);
  // @@protoc_insertion_point(field_set:state_transfer.TxnInfo.isQuery)
}

// -------------------------------------------------------------------

// Order

// int64 txn_id = 1;
inline void Order::clear_txn_id() {
  txn_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::_internal_txn_id() const {
  return txn_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::txn_id() const {
  // @@protoc_insertion_point(field_get:state_transfer.Order.txn_id)
  return _internal_txn_id();
}
inline void Order::_internal_set_txn_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  txn_id_ = value;
}
inline void Order::set_txn_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_txn_id(value);
  // @@protoc_insertion_point(field_set:state_transfer.Order.txn_id)
}

// int64 txn_type = 2;
inline void Order::clear_txn_type() {
  txn_type_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::_internal_txn_type() const {
  return txn_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::txn_type() const {
  // @@protoc_insertion_point(field_get:state_transfer.Order.txn_type)
  return _internal_txn_type();
}
inline void Order::_internal_set_txn_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  txn_type_ = value;
}
inline void Order::set_txn_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_txn_type(value);
  // @@protoc_insertion_point(field_set:state_transfer.Order.txn_type)
}

// repeated string touched_cols = 3;
inline int Order::_internal_touched_cols_size() const {
  return touched_cols_.size();
}
inline int Order::touched_cols_size() const {
  return _internal_touched_cols_size();
}
inline void Order::clear_touched_cols() {
  touched_cols_.Clear();
}
inline std::string* Order::add_touched_cols() {
  // @@protoc_insertion_point(field_add_mutable:state_transfer.Order.touched_cols)
  return _internal_add_touched_cols();
}
inline const std::string& Order::_internal_touched_cols(int index) const {
  return touched_cols_.Get(index);
}
inline const std::string& Order::touched_cols(int index) const {
  // @@protoc_insertion_point(field_get:state_transfer.Order.touched_cols)
  return _internal_touched_cols(index);
}
inline std::string* Order::mutable_touched_cols(int index) {
  // @@protoc_insertion_point(field_mutable:state_transfer.Order.touched_cols)
  return touched_cols_.Mutable(index);
}
inline void Order::set_touched_cols(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:state_transfer.Order.touched_cols)
  touched_cols_.Mutable(index)->assign(value);
}
inline void Order::set_touched_cols(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:state_transfer.Order.touched_cols)
  touched_cols_.Mutable(index)->assign(std::move(value));
}
inline void Order::set_touched_cols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  touched_cols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:state_transfer.Order.touched_cols)
}
inline void Order::set_touched_cols(int index, const char* value, size_t size) {
  touched_cols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:state_transfer.Order.touched_cols)
}
inline std::string* Order::_internal_add_touched_cols() {
  return touched_cols_.Add();
}
inline void Order::add_touched_cols(const std::string& value) {
  touched_cols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:state_transfer.Order.touched_cols)
}
inline void Order::add_touched_cols(std::string&& value) {
  touched_cols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:state_transfer.Order.touched_cols)
}
inline void Order::add_touched_cols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  touched_cols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:state_transfer.Order.touched_cols)
}
inline void Order::add_touched_cols(const char* value, size_t size) {
  touched_cols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:state_transfer.Order.touched_cols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Order::touched_cols() const {
  // @@protoc_insertion_point(field_list:state_transfer.Order.touched_cols)
  return touched_cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Order::mutable_touched_cols() {
  // @@protoc_insertion_point(field_mutable_list:state_transfer.Order.touched_cols)
  return &touched_cols_;
}

// repeated int32 touched_shard = 4;
inline int Order::_internal_touched_shard_size() const {
  return touched_shard_.size();
}
inline int Order::touched_shard_size() const {
  return _internal_touched_shard_size();
}
inline void Order::clear_touched_shard() {
  touched_shard_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_touched_shard(int index) const {
  return touched_shard_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::touched_shard(int index) const {
  // @@protoc_insertion_point(field_get:state_transfer.Order.touched_shard)
  return _internal_touched_shard(index);
}
inline void Order::set_touched_shard(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  touched_shard_.Set(index, value);
  // @@protoc_insertion_point(field_set:state_transfer.Order.touched_shard)
}
inline void Order::_internal_add_touched_shard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  touched_shard_.Add(value);
}
inline void Order::add_touched_shard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_touched_shard(value);
  // @@protoc_insertion_point(field_add:state_transfer.Order.touched_shard)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Order::_internal_touched_shard() const {
  return touched_shard_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Order::touched_shard() const {
  // @@protoc_insertion_point(field_list:state_transfer.Order.touched_shard)
  return _internal_touched_shard();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Order::_internal_mutable_touched_shard() {
  return &touched_shard_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Order::mutable_touched_shard() {
  // @@protoc_insertion_point(field_mutable_list:state_transfer.Order.touched_shard)
  return _internal_mutable_touched_shard();
}

// -------------------------------------------------------------------

// OrderReq

// int32 shard_id = 1;
inline void OrderReq::clear_shard_id() {
  shard_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderReq::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderReq::shard_id() const {
  // @@protoc_insertion_point(field_get:state_transfer.OrderReq.shard_id)
  return _internal_shard_id();
}
inline void OrderReq::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shard_id_ = value;
}
inline void OrderReq::set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:state_transfer.OrderReq.shard_id)
}

// repeated .state_transfer.Order orders = 2;
inline int OrderReq::_internal_orders_size() const {
  return orders_.size();
}
inline int OrderReq::orders_size() const {
  return _internal_orders_size();
}
inline void OrderReq::clear_orders() {
  orders_.Clear();
}
inline ::state_transfer::Order* OrderReq::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:state_transfer.OrderReq.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::state_transfer::Order >*
OrderReq::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:state_transfer.OrderReq.orders)
  return &orders_;
}
inline const ::state_transfer::Order& OrderReq::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::state_transfer::Order& OrderReq::orders(int index) const {
  // @@protoc_insertion_point(field_get:state_transfer.OrderReq.orders)
  return _internal_orders(index);
}
inline ::state_transfer::Order* OrderReq::_internal_add_orders() {
  return orders_.Add();
}
inline ::state_transfer::Order* OrderReq::add_orders() {
  // @@protoc_insertion_point(field_add:state_transfer.OrderReq.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::state_transfer::Order >&
OrderReq::orders() const {
  // @@protoc_insertion_point(field_list:state_transfer.OrderReq.orders)
  return orders_;
}

// -------------------------------------------------------------------

// OrderResp

// int32 res = 1;
inline void OrderResp::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderResp::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderResp::res() const {
  // @@protoc_insertion_point(field_get:state_transfer.OrderResp.res)
  return _internal_res();
}
inline void OrderResp::_internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
}
inline void OrderResp::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:state_transfer.OrderResp.res)
}

// -------------------------------------------------------------------

// Query

// int64 txn_id = 1;
inline void Query::clear_txn_id() {
  txn_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Query::_internal_txn_id() const {
  return txn_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Query::txn_id() const {
  // @@protoc_insertion_point(field_get:state_transfer.Query.txn_id)
  return _internal_txn_id();
}
inline void Query::_internal_set_txn_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  txn_id_ = value;
}
inline void Query::set_txn_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_txn_id(value);
  // @@protoc_insertion_point(field_set:state_transfer.Query.txn_id)
}

// int64 txn_type = 2;
inline void Query::clear_txn_type() {
  txn_type_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Query::_internal_txn_type() const {
  return txn_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Query::txn_type() const {
  // @@protoc_insertion_point(field_get:state_transfer.Query.txn_type)
  return _internal_txn_type();
}
inline void Query::_internal_set_txn_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  txn_type_ = value;
}
inline void Query::set_txn_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_txn_type(value);
  // @@protoc_insertion_point(field_set:state_transfer.Query.txn_type)
}

// repeated string touched_cols = 3;
inline int Query::_internal_touched_cols_size() const {
  return touched_cols_.size();
}
inline int Query::touched_cols_size() const {
  return _internal_touched_cols_size();
}
inline void Query::clear_touched_cols() {
  touched_cols_.Clear();
}
inline std::string* Query::add_touched_cols() {
  // @@protoc_insertion_point(field_add_mutable:state_transfer.Query.touched_cols)
  return _internal_add_touched_cols();
}
inline const std::string& Query::_internal_touched_cols(int index) const {
  return touched_cols_.Get(index);
}
inline const std::string& Query::touched_cols(int index) const {
  // @@protoc_insertion_point(field_get:state_transfer.Query.touched_cols)
  return _internal_touched_cols(index);
}
inline std::string* Query::mutable_touched_cols(int index) {
  // @@protoc_insertion_point(field_mutable:state_transfer.Query.touched_cols)
  return touched_cols_.Mutable(index);
}
inline void Query::set_touched_cols(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:state_transfer.Query.touched_cols)
  touched_cols_.Mutable(index)->assign(value);
}
inline void Query::set_touched_cols(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:state_transfer.Query.touched_cols)
  touched_cols_.Mutable(index)->assign(std::move(value));
}
inline void Query::set_touched_cols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  touched_cols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:state_transfer.Query.touched_cols)
}
inline void Query::set_touched_cols(int index, const char* value, size_t size) {
  touched_cols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:state_transfer.Query.touched_cols)
}
inline std::string* Query::_internal_add_touched_cols() {
  return touched_cols_.Add();
}
inline void Query::add_touched_cols(const std::string& value) {
  touched_cols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:state_transfer.Query.touched_cols)
}
inline void Query::add_touched_cols(std::string&& value) {
  touched_cols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:state_transfer.Query.touched_cols)
}
inline void Query::add_touched_cols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  touched_cols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:state_transfer.Query.touched_cols)
}
inline void Query::add_touched_cols(const char* value, size_t size) {
  touched_cols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:state_transfer.Query.touched_cols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Query::touched_cols() const {
  // @@protoc_insertion_point(field_list:state_transfer.Query.touched_cols)
  return touched_cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Query::mutable_touched_cols() {
  // @@protoc_insertion_point(field_mutable_list:state_transfer.Query.touched_cols)
  return &touched_cols_;
}

// repeated int32 touched_shard = 4;
inline int Query::_internal_touched_shard_size() const {
  return touched_shard_.size();
}
inline int Query::touched_shard_size() const {
  return _internal_touched_shard_size();
}
inline void Query::clear_touched_shard() {
  touched_shard_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Query::_internal_touched_shard(int index) const {
  return touched_shard_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Query::touched_shard(int index) const {
  // @@protoc_insertion_point(field_get:state_transfer.Query.touched_shard)
  return _internal_touched_shard(index);
}
inline void Query::set_touched_shard(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  touched_shard_.Set(index, value);
  // @@protoc_insertion_point(field_set:state_transfer.Query.touched_shard)
}
inline void Query::_internal_add_touched_shard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  touched_shard_.Add(value);
}
inline void Query::add_touched_shard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_touched_shard(value);
  // @@protoc_insertion_point(field_add:state_transfer.Query.touched_shard)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Query::_internal_touched_shard() const {
  return touched_shard_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Query::touched_shard() const {
  // @@protoc_insertion_point(field_list:state_transfer.Query.touched_shard)
  return _internal_touched_shard();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Query::_internal_mutable_touched_shard() {
  return &touched_shard_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Query::mutable_touched_shard() {
  // @@protoc_insertion_point(field_mutable_list:state_transfer.Query.touched_shard)
  return _internal_mutable_touched_shard();
}

// string content = 5;
inline void Query::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Query::content() const {
  // @@protoc_insertion_point(field_get:state_transfer.Query.content)
  return _internal_content();
}
inline void Query::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:state_transfer.Query.content)
}
inline std::string* Query::mutable_content() {
  // @@protoc_insertion_point(field_mutable:state_transfer.Query.content)
  return _internal_mutable_content();
}
inline const std::string& Query::_internal_content() const {
  return content_.Get();
}
inline void Query::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Query::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:state_transfer.Query.content)
}
inline void Query::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:state_transfer.Query.content)
}
inline void Query::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:state_transfer.Query.content)
}
inline std::string* Query::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Query::release_content() {
  // @@protoc_insertion_point(field_release:state_transfer.Query.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Query::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:state_transfer.Query.content)
}

// -------------------------------------------------------------------

// QueryResp

// int32 res = 1;
inline void QueryResp::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResp::_internal_res() const {
  return res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResp::res() const {
  // @@protoc_insertion_point(field_get:state_transfer.QueryResp.res)
  return _internal_res();
}
inline void QueryResp::_internal_set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
}
inline void QueryResp::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:state_transfer.QueryResp.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace state_transfer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::state_transfer::Update_OpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::state_transfer::Update_OpType>() {
  return ::state_transfer::Update_OpType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_5ftransfer_2eproto
